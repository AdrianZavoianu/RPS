"""Main application window."""

from PyQt6.QtWidgets import (
    QMainWindow,
    QWidget,
    QVBoxLayout,
    QHBoxLayout,
    QMenuBar,
    QMenu,
    QStatusBar,
    QLabel,
    QSplitter,
)
from PyQt6.QtCore import Qt, QSize
from PyQt6.QtGui import QAction

from .import_dialog import ImportDialog
from .results_browser import ResultsBrowser
from .visualization_widget import VisualizationWidget
from .window_utils import enable_dark_title_bar


class MainWindow(QMainWindow):
    """Main application window with menu, results browser, and visualization area."""

    def __init__(self):
        super().__init__()
        self.setWindowTitle("Results Processing System")
        self.setMinimumSize(QSize(1400, 900))

        # OPTION: Remove window frame entirely for consistent look on WSL
        # Uncomment the line below to test frameless window
        # self.setWindowFlags(Qt.WindowType.FramelessWindowHint)

        # Initialize UI components
        self._create_menus()
        self._create_central_widget()
        self._create_status_bar()

        # Store current project
        self.current_project = None

        # Apply object names for styling
        self.setObjectName("mainWindow")

    def showEvent(self, event):
        """Override showEvent to apply dark title bar after window is shown."""
        super().showEvent(event)
        # Enable dark title bar on Windows
        enable_dark_title_bar(self)

    def _create_menus(self):
        """Create application menu bar."""
        menubar = self.menuBar()

        # File Menu
        file_menu = menubar.addMenu("&File")

        import_action = QAction("&Import Excel...", self)
        import_action.setShortcut("Ctrl+I")
        import_action.setStatusTip("Import results from Excel file")
        import_action.triggered.connect(self._on_import)
        file_menu.addAction(import_action)

        file_menu.addSeparator()

        exit_action = QAction("E&xit", self)
        exit_action.setShortcut("Ctrl+Q")
        exit_action.setStatusTip("Exit application")
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)

        # View Menu
        view_menu = menubar.addMenu("&View")

        refresh_action = QAction("&Refresh", self)
        refresh_action.setShortcut("F5")
        refresh_action.setStatusTip("Refresh results view")
        refresh_action.triggered.connect(self._on_refresh)
        view_menu.addAction(refresh_action)

        # Tools Menu
        tools_menu = menubar.addMenu("&Tools")

        database_action = QAction("&Database Info", self)
        database_action.setStatusTip("View database information")
        database_action.triggered.connect(self._on_database_info)
        tools_menu.addAction(database_action)

        # Help Menu
        help_menu = menubar.addMenu("&Help")

        about_action = QAction("&About", self)
        about_action.setStatusTip("About this application")
        about_action.triggered.connect(self._on_about)
        help_menu.addAction(about_action)

    def _create_central_widget(self):
        """Create central widget with modern web-style layout."""
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        # Main layout with padding for modern look
        layout = QVBoxLayout(central_widget)
        layout.setContentsMargins(8, 8, 8, 8)
        layout.setSpacing(8)

        # Create horizontal splitter
        splitter = QSplitter(Qt.Orientation.Horizontal)
        splitter.setHandleWidth(1)

        # Left: Results browser (sidebar style)
        self.results_browser = ResultsBrowser()
        self.results_browser.setMinimumWidth(280)
        self.results_browser.setMaximumWidth(400)
        splitter.addWidget(self.results_browser)

        # Right: Visualization widget (main content area)
        self.visualization_widget = VisualizationWidget()
        splitter.addWidget(self.visualization_widget)

        # Set initial splitter sizes (25% / 75%)
        splitter.setSizes([280, 900])
        splitter.setStretchFactor(0, 0)  # Sidebar doesn't stretch
        splitter.setStretchFactor(1, 1)  # Main content stretches

        layout.addWidget(splitter)

        # Connect signals
        self.results_browser.selection_changed.connect(
            self.visualization_widget.on_selection_changed
        )

    def _create_status_bar(self):
        """Create status bar."""
        self.statusBar().showMessage("Ready")

        # Add permanent widgets to status bar
        self.project_label = QLabel("No project loaded")
        self.statusBar().addPermanentWidget(self.project_label)

    def _on_import(self):
        """Handle import action."""
        from PyQt6.QtWidgets import QMessageBox
        from processing.data_importer import DataImporter

        dialog = ImportDialog(self)
        if dialog.exec():
            # Get selected file from dialog
            file_path = dialog.get_selected_file()
            project_name = dialog.get_project_name()
            analysis_type = dialog.get_analysis_type()

            if file_path and project_name:
                self.statusBar().showMessage(f"Importing {file_path}...")

                try:
                    # Import data
                    importer = DataImporter(file_path, project_name, analysis_type)
                    stats = importer.import_all()

                    # Show success message
                    message = (
                        f"Import successful!\n\n"
                        f"Project: {stats['project']}\n"
                        f"Load Cases: {stats['load_cases']}\n"
                        f"Stories: {stats['stories']}\n"
                        f"Drifts: {stats['drifts']}\n"
                        f"Accelerations: {stats['accelerations']}\n"
                        f"Forces: {stats['forces']}"
                    )

                    if stats['errors']:
                        message += f"\n\nWarnings:\n" + "\n".join(stats['errors'])

                    QMessageBox.information(self, "Import Complete", message)

                    self.statusBar().showMessage(f"Import complete: {project_name}", 5000)
                    self.project_label.setText(f"Project: {project_name}")
                    self.current_project = project_name

                    # Refresh results browser
                    self.results_browser.refresh()

                except Exception as e:
                    QMessageBox.critical(
                        self,
                        "Import Error",
                        f"Failed to import data:\n\n{str(e)}"
                    )
                    self.statusBar().showMessage("Import failed", 5000)

    def _on_refresh(self):
        """Handle refresh action."""
        self.statusBar().showMessage("Refreshing...", 2000)
        self.results_browser.refresh()

    def _on_database_info(self):
        """Show database information."""
        from database.base import DB_PATH

        self.statusBar().showMessage(f"Database: {DB_PATH}", 5000)

    def _on_about(self):
        """Show about dialog."""
        from PyQt6.QtWidgets import QMessageBox

        QMessageBox.about(
            self,
            "About RPS",
            "<h3>Results Processing System</h3>"
            "<p>Version 0.1.0</p>"
            "<p>A desktop application for processing structural "
            "engineering results from ETABS/SAP2000.</p>"
            "<p><b>Technology Stack:</b></p>"
            "<ul>"
            "<li>PyQt6 - UI Framework</li>"
            "<li>PyQtGraph - Visualization</li>"
            "<li>SQLite - Database</li>"
            "<li>Pandas - Data Processing</li>"
            "</ul>",
        )
