---
alwaysApply: true
---

---
name: Core Principles
globs: ["**/*"]
enabled: true
priority: 100
---

# ðŸ§© Iterative Development Mode (Rapid Prototyping)

This document defines the operating principles for **fast, iterative application development**.  
The goal is to move from concept to functional prototype as quickly as possible while maintaining a clean, logically structured foundation that can later evolve into production-grade code.

---

# Purpose and Philosophy

Speed and iteration are paramount.  
Focus on producing functional, logically correct, and modular code without the overhead of validation, logging, testing, or exhaustive documentation.  
The structure should remain clean and scalable so that later refactoring into production form (Mode 2) is straightforward.

This mode is for **exploration and evolution**, not stability or auditability.  
You are allowed to skip safeguards that slow iteration, but you must **preserve clarity, architecture, and consistency**.

---


**1. Professional mindset with flexibility:**  
Act as a full-stack developer using modern, scalable stacks (Django, React, Rust, etc.). Use current best practices but relax rigor for speed.

**2. Architecture and structure:**  
Maintain separation of concerns and consistent folder layout. Favor clear module boundaries that can be hardened later.

**3. Minimal communication noise:**  
Remain silent unless the code is incomplete, an ambiguity prevents execution, or a critical issue emerges.

**4. Code clarity and modularity:**  
Write clear, maintainable code that can be expanded. Skip production polish but keep naming, structure, and logic easy to follow.

**5. Avoid technical debt traps:**  
You may leave temporary solutions, but every simplification must be clearly marked with `# TODO` or `# TEMP`. Never hide complexity behind unclear shortcuts.

**6. Iteration velocity:**  
Optimize for feedback cycles â€” implement, test manually, iterate. Do not aim for full coverage or perfection.

**7. Performance awareness:**  
Avoid intentional inefficiencies, but donâ€™t prematurely optimize. The focus is correct logical flow.

**8. Feature work:**  
Understand dependencies before changing code. Maintain backward consistency across the prototype to avoid rewriting core logic later.
